// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: proto/kvs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KVS_Insere_FullMethodName         = "/kvs.KVS/Insere"
	KVS_Consulta_FullMethodName       = "/kvs.KVS/Consulta"
	KVS_Remove_FullMethodName         = "/kvs.KVS/Remove"
	KVS_InsereVarias_FullMethodName   = "/kvs.KVS/InsereVarias"
	KVS_ConsultaVarias_FullMethodName = "/kvs.KVS/ConsultaVarias"
	KVS_RemoveVarias_FullMethodName   = "/kvs.KVS/RemoveVarias"
	KVS_Snapshot_FullMethodName       = "/kvs.KVS/Snapshot"
)

// KVSClient is the client API for KVS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVSClient interface {
	Insere(ctx context.Context, in *ChaveValor, opts ...grpc.CallOption) (*Versao, error)
	Consulta(ctx context.Context, in *ChaveVersao, opts ...grpc.CallOption) (*Tupla, error)
	Remove(ctx context.Context, in *ChaveVersao, opts ...grpc.CallOption) (*Versao, error)
	InsereVarias(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaveValor, Versao], error)
	ConsultaVarias(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaveVersao, Tupla], error)
	RemoveVarias(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaveVersao, Versao], error)
	Snapshot(ctx context.Context, in *Versao, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tupla], error)
}

type kVSClient struct {
	cc grpc.ClientConnInterface
}

func NewKVSClient(cc grpc.ClientConnInterface) KVSClient {
	return &kVSClient{cc}
}

func (c *kVSClient) Insere(ctx context.Context, in *ChaveValor, opts ...grpc.CallOption) (*Versao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Versao)
	err := c.cc.Invoke(ctx, KVS_Insere_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Consulta(ctx context.Context, in *ChaveVersao, opts ...grpc.CallOption) (*Tupla, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tupla)
	err := c.cc.Invoke(ctx, KVS_Consulta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Remove(ctx context.Context, in *ChaveVersao, opts ...grpc.CallOption) (*Versao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Versao)
	err := c.cc.Invoke(ctx, KVS_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) InsereVarias(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaveValor, Versao], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KVS_ServiceDesc.Streams[0], KVS_InsereVarias_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChaveValor, Versao]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_InsereVariasClient = grpc.BidiStreamingClient[ChaveValor, Versao]

func (c *kVSClient) ConsultaVarias(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaveVersao, Tupla], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KVS_ServiceDesc.Streams[1], KVS_ConsultaVarias_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChaveVersao, Tupla]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_ConsultaVariasClient = grpc.BidiStreamingClient[ChaveVersao, Tupla]

func (c *kVSClient) RemoveVarias(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaveVersao, Versao], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KVS_ServiceDesc.Streams[2], KVS_RemoveVarias_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChaveVersao, Versao]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_RemoveVariasClient = grpc.BidiStreamingClient[ChaveVersao, Versao]

func (c *kVSClient) Snapshot(ctx context.Context, in *Versao, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tupla], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KVS_ServiceDesc.Streams[3], KVS_Snapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Versao, Tupla]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_SnapshotClient = grpc.ServerStreamingClient[Tupla]

// KVSServer is the server API for KVS service.
// All implementations must embed UnimplementedKVSServer
// for forward compatibility.
type KVSServer interface {
	Insere(context.Context, *ChaveValor) (*Versao, error)
	Consulta(context.Context, *ChaveVersao) (*Tupla, error)
	Remove(context.Context, *ChaveVersao) (*Versao, error)
	InsereVarias(grpc.BidiStreamingServer[ChaveValor, Versao]) error
	ConsultaVarias(grpc.BidiStreamingServer[ChaveVersao, Tupla]) error
	RemoveVarias(grpc.BidiStreamingServer[ChaveVersao, Versao]) error
	Snapshot(*Versao, grpc.ServerStreamingServer[Tupla]) error
	mustEmbedUnimplementedKVSServer()
}

// UnimplementedKVSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKVSServer struct{}

func (UnimplementedKVSServer) Insere(context.Context, *ChaveValor) (*Versao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insere not implemented")
}
func (UnimplementedKVSServer) Consulta(context.Context, *ChaveVersao) (*Tupla, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consulta not implemented")
}
func (UnimplementedKVSServer) Remove(context.Context, *ChaveVersao) (*Versao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedKVSServer) InsereVarias(grpc.BidiStreamingServer[ChaveValor, Versao]) error {
	return status.Errorf(codes.Unimplemented, "method InsereVarias not implemented")
}
func (UnimplementedKVSServer) ConsultaVarias(grpc.BidiStreamingServer[ChaveVersao, Tupla]) error {
	return status.Errorf(codes.Unimplemented, "method ConsultaVarias not implemented")
}
func (UnimplementedKVSServer) RemoveVarias(grpc.BidiStreamingServer[ChaveVersao, Versao]) error {
	return status.Errorf(codes.Unimplemented, "method RemoveVarias not implemented")
}
func (UnimplementedKVSServer) Snapshot(*Versao, grpc.ServerStreamingServer[Tupla]) error {
	return status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedKVSServer) mustEmbedUnimplementedKVSServer() {}
func (UnimplementedKVSServer) testEmbeddedByValue()             {}

// UnsafeKVSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVSServer will
// result in compilation errors.
type UnsafeKVSServer interface {
	mustEmbedUnimplementedKVSServer()
}

func RegisterKVSServer(s grpc.ServiceRegistrar, srv KVSServer) {
	// If the following call pancis, it indicates UnimplementedKVSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KVS_ServiceDesc, srv)
}

func _KVS_Insere_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaveValor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Insere(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Insere_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Insere(ctx, req.(*ChaveValor))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Consulta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaveVersao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Consulta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Consulta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Consulta(ctx, req.(*ChaveVersao))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaveVersao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Remove(ctx, req.(*ChaveVersao))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_InsereVarias_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVSServer).InsereVarias(&grpc.GenericServerStream[ChaveValor, Versao]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_InsereVariasServer = grpc.BidiStreamingServer[ChaveValor, Versao]

func _KVS_ConsultaVarias_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVSServer).ConsultaVarias(&grpc.GenericServerStream[ChaveVersao, Tupla]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_ConsultaVariasServer = grpc.BidiStreamingServer[ChaveVersao, Tupla]

func _KVS_RemoveVarias_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVSServer).RemoveVarias(&grpc.GenericServerStream[ChaveVersao, Versao]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_RemoveVariasServer = grpc.BidiStreamingServer[ChaveVersao, Versao]

func _KVS_Snapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Versao)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVSServer).Snapshot(m, &grpc.GenericServerStream[Versao, Tupla]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVS_SnapshotServer = grpc.ServerStreamingServer[Tupla]

// KVS_ServiceDesc is the grpc.ServiceDesc for KVS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvs.KVS",
	HandlerType: (*KVSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insere",
			Handler:    _KVS_Insere_Handler,
		},
		{
			MethodName: "Consulta",
			Handler:    _KVS_Consulta_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _KVS_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsereVarias",
			Handler:       _KVS_InsereVarias_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConsultaVarias",
			Handler:       _KVS_ConsultaVarias_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveVarias",
			Handler:       _KVS_RemoveVarias_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Snapshot",
			Handler:       _KVS_Snapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/kvs.proto",
}
